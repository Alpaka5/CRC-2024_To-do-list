# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import todo_pb2 as todo__pb2


class ToDoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTodo = channel.unary_unary(
                '/todo.ToDoService/CreateTodo',
                request_serializer=todo__pb2.TodoElement.SerializeToString,
                response_deserializer=todo__pb2.TodoId.FromString,
                )
        self.GetTodo = channel.unary_unary(
                '/todo.ToDoService/GetTodo',
                request_serializer=todo__pb2.TodoId.SerializeToString,
                response_deserializer=todo__pb2.TodoElement.FromString,
                )
        self.GetAllTodos = channel.unary_stream(
                '/todo.ToDoService/GetAllTodos',
                request_serializer=todo__pb2.Empty.SerializeToString,
                response_deserializer=todo__pb2.TodoElement.FromString,
                )
        self.FinishTodo = channel.unary_unary(
                '/todo.ToDoService/FinishTodo',
                request_serializer=todo__pb2.TodoId.SerializeToString,
                response_deserializer=todo__pb2.Succeed.FromString,
                )
        self.EditTodo = channel.unary_unary(
                '/todo.ToDoService/EditTodo',
                request_serializer=todo__pb2.TodoElement.SerializeToString,
                response_deserializer=todo__pb2.Succeed.FromString,
                )
        self.RemoveTodo = channel.unary_unary(
                '/todo.ToDoService/RemoveTodo',
                request_serializer=todo__pb2.TodoId.SerializeToString,
                response_deserializer=todo__pb2.Succeed.FromString,
                )


class ToDoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateTodo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTodo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllTodos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishTodo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditTodo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveTodo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ToDoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTodo': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTodo,
                    request_deserializer=todo__pb2.TodoElement.FromString,
                    response_serializer=todo__pb2.TodoId.SerializeToString,
            ),
            'GetTodo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTodo,
                    request_deserializer=todo__pb2.TodoId.FromString,
                    response_serializer=todo__pb2.TodoElement.SerializeToString,
            ),
            'GetAllTodos': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAllTodos,
                    request_deserializer=todo__pb2.Empty.FromString,
                    response_serializer=todo__pb2.TodoElement.SerializeToString,
            ),
            'FinishTodo': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishTodo,
                    request_deserializer=todo__pb2.TodoId.FromString,
                    response_serializer=todo__pb2.Succeed.SerializeToString,
            ),
            'EditTodo': grpc.unary_unary_rpc_method_handler(
                    servicer.EditTodo,
                    request_deserializer=todo__pb2.TodoElement.FromString,
                    response_serializer=todo__pb2.Succeed.SerializeToString,
            ),
            'RemoveTodo': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveTodo,
                    request_deserializer=todo__pb2.TodoId.FromString,
                    response_serializer=todo__pb2.Succeed.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'todo.ToDoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ToDoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateTodo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/todo.ToDoService/CreateTodo',
            todo__pb2.TodoElement.SerializeToString,
            todo__pb2.TodoId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTodo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/todo.ToDoService/GetTodo',
            todo__pb2.TodoId.SerializeToString,
            todo__pb2.TodoElement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllTodos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/todo.ToDoService/GetAllTodos',
            todo__pb2.Empty.SerializeToString,
            todo__pb2.TodoElement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishTodo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/todo.ToDoService/FinishTodo',
            todo__pb2.TodoId.SerializeToString,
            todo__pb2.Succeed.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EditTodo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/todo.ToDoService/EditTodo',
            todo__pb2.TodoElement.SerializeToString,
            todo__pb2.Succeed.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveTodo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/todo.ToDoService/RemoveTodo',
            todo__pb2.TodoId.SerializeToString,
            todo__pb2.Succeed.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
